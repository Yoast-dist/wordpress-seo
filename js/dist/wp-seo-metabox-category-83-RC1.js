yoastWebpackJsonp([12],{

/***/ 2432:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _data = __webpack_require__(393);\n\n__webpack_require__(51);\n\n/* global wp, _, wpseoPrimaryCategoryL10n */\n/* External dependencies */\n(function ($) {\n\t\"use strict\";\n\n\tvar primaryTermUITemplate, primaryTermScreenReaderTemplate;\n\tvar taxonomies = wpseoPrimaryCategoryL10n.taxonomies;\n\n\t/**\n  * Checks if the elements to make a term the primary term and the display for a primary term exist.\n  *\n  * @param {Object} checkbox The checkbox to get the closest required fields for.\n  *\n  * @returns {boolean} True when there are primary elements.\n  */\n\tfunction hasPrimaryTermElements(checkbox) {\n\t\treturn 1 === $(checkbox).closest(\"li\").children(\".wpseo-make-primary-term\").length;\n\t}\n\n\t/**\n  * Retrieves the primary term for a taxonomy.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {string} The value of the primary term.\n  */\n\tfunction getPrimaryTerm(taxonomyName) {\n\t\tvar primaryTermInput;\n\n\t\tprimaryTermInput = $(\"#yoast-wpseo-primary-\" + taxonomyName);\n\t\treturn primaryTermInput.val();\n\t}\n\n\t/**\n  * Gets the name of a term for the category taxonomy.\n  *\n  * @param {number} categoryTermId The terms's id.\n  *\n  * @returns {string} The term's name.\n  */\n\tfunction getCategoryTermName(categoryTermId) {\n\t\tvar categoryListItem = $(\"#category-all\").find(\"#category-\" + categoryTermId + \" > label\");\n\t\tif (categoryListItem.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tvar clone = categoryListItem.clone();\n\t\tclone.children().remove();\n\t\treturn $.trim(clone.text());\n\t}\n\n\t/**\n  * Sets the primary term for a taxonomy.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  * @param {string} termId       The term id.\n  *\n  * @returns {void}\n  */\n\tfunction setPrimaryTerm(taxonomyName, termId) {\n\t\tvar primaryTermInput = $(\"#yoast-wpseo-primary-\" + taxonomyName);\n\t\tprimaryTermInput.val(termId).trigger(\"change\");\n\n\t\tvar yoastEditor = (0, _data.dispatch)(\"yoast-seo/editor\");\n\t\tif (yoastEditor) {\n\t\t\tvar termIdInt = parseInt(termId, 10);\n\t\t\tyoastEditor.setPrimaryTaxonomyId(taxonomyName, termIdInt);\n\t\t\t// If the taxonomy is category update the replacement variable.\n\t\t\tif (taxonomyName === \"category\") {\n\t\t\t\tyoastEditor.updateReplacementVariable(\"primary_category\", getCategoryTermName(termIdInt));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n  * Creates the elements necessary to show something is a primary term or to make it the primary term.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  * @param {Object} checkbox     The checkbox to get label for.\n  *\n  * @returns {void}\n  */\n\tfunction createPrimaryTermElements(taxonomyName, checkbox) {\n\t\tvar label, html;\n\n\t\tlabel = $(checkbox).closest(\"label\");\n\n\t\thtml = primaryTermUITemplate({\n\t\t\ttaxonomy: taxonomies[taxonomyName],\n\t\t\tterm: label.text()\n\t\t});\n\n\t\tlabel.after(html);\n\t}\n\n\t/**\n  * Updates the primary term selectors/indicators for a certain taxonomy.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {void}\n  */\n\tfunction updatePrimaryTermSelectors(taxonomyName) {\n\t\tvar checkedTerms;\n\t\tvar listItem, label;\n\n\t\tcheckedTerms = $(\"#\" + taxonomyName + 'checklist input[type=\"checkbox\"]:checked');\n\n\t\tvar taxonomyListItem = $(\"#\" + taxonomyName + \"checklist li\");\n\t\ttaxonomyListItem.removeClass(\"wpseo-term-unchecked wpseo-primary-term wpseo-non-primary-term\");\n\n\t\t$(\".wpseo-primary-category-label\").remove();\n\t\ttaxonomyListItem.addClass(\"wpseo-term-unchecked\");\n\n\t\t// If there is only one term selected we don't want to show our interface.\n\t\tif (checkedTerms.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tcheckedTerms.each(function (i, term) {\n\t\t\tterm = $(term);\n\t\t\tlistItem = term.closest(\"li\");\n\t\t\tlistItem.removeClass(\"wpseo-term-unchecked\");\n\n\t\t\t// Create our interface elements if they don't exist.\n\t\t\tif (!hasPrimaryTermElements(term)) {\n\t\t\t\tcreatePrimaryTermElements(taxonomyName, term);\n\t\t\t}\n\n\t\t\tif (term.val() === getPrimaryTerm(taxonomyName)) {\n\t\t\t\tlistItem.addClass(\"wpseo-primary-term\");\n\n\t\t\t\tlabel = term.closest(\"label\");\n\t\t\t\tlabel.find(\".wpseo-primary-category-label\").remove();\n\t\t\t\tlabel.append(primaryTermScreenReaderTemplate({\n\t\t\t\t\ttaxonomy: taxonomies[taxonomyName]\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tlistItem.addClass(\"wpseo-non-primary-term\");\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n  * Makes the first term primary for a certain taxonomy.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {void}\n  */\n\tfunction makeFirstTermPrimary(taxonomyName) {\n\t\tvar firstTerm = $(\"#\" + taxonomyName + 'checklist input[type=\"checkbox\"]:checked:first');\n\n\t\tsetPrimaryTerm(taxonomyName, firstTerm.val());\n\t\tupdatePrimaryTermSelectors(taxonomyName);\n\t}\n\n\t/**\n  * If we check a term while there is no primary term we make that one the primary term.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {void}\n  */\n\tfunction ensurePrimaryTerm(taxonomyName) {\n\t\tif (\"\" === getPrimaryTerm(taxonomyName)) {\n\t\t\tmakeFirstTermPrimary(taxonomyName);\n\t\t}\n\t}\n\n\t/**\n  * Returns the term checkbox handler for a certain taxonomy name.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {Function} Event handler for the checkbox.\n  */\n\tfunction termCheckboxHandler(taxonomyName) {\n\t\treturn function () {\n\t\t\t// If the user unchecks the primary category we have to select any new primary term\n\t\t\tif (false === $(this).prop(\"checked\") && $(this).val() === getPrimaryTerm(taxonomyName)) {\n\t\t\t\tmakeFirstTermPrimary(taxonomyName);\n\t\t\t}\n\n\t\t\tensurePrimaryTerm(taxonomyName);\n\n\t\t\tupdatePrimaryTermSelectors(taxonomyName);\n\t\t};\n\t}\n\n\t/**\n  * Returns the term list add handler for a certain taxonomy name.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {Function} The term list add handler.\n  */\n\tfunction termListAddHandler(taxonomyName) {\n\t\treturn function () {\n\t\t\tensurePrimaryTerm(taxonomyName);\n\t\t\tupdatePrimaryTermSelectors(taxonomyName);\n\t\t};\n\t}\n\n\t/**\n  * Returns the make primary event handler for a certain taxonomy name.\n  *\n  * @param {string} taxonomyName The taxonomy name.\n  *\n  * @returns {Function} The event handler.\n  */\n\tfunction makePrimaryHandler(taxonomyName) {\n\t\treturn function (e) {\n\t\t\tvar term, checkbox;\n\n\t\t\tterm = $(e.currentTarget);\n\t\t\tcheckbox = term.siblings(\"label\").find(\"input\");\n\n\t\t\tsetPrimaryTerm(taxonomyName, checkbox.val());\n\n\t\t\tupdatePrimaryTermSelectors(taxonomyName);\n\n\t\t\t// The clicked link will be hidden so we need to focus something different.\n\t\t\tcheckbox.focus();\n\t\t};\n\t}\n\n\t$.fn.initYstSEOPrimaryCategory = function () {\n\t\treturn this.each(function (i, taxonomy) {\n\t\t\tvar metaboxTaxonomy = $(\"#\" + taxonomy.name + \"div\");\n\n\t\t\tupdatePrimaryTermSelectors(taxonomy.name);\n\n\t\t\tmetaboxTaxonomy.on(\"click\", 'input[type=\"checkbox\"]', termCheckboxHandler(taxonomy.name));\n\n\t\t\t// When the AJAX Request is done, this event will be fired.\n\t\t\tmetaboxTaxonomy.on(\"wpListAddEnd\", \"#\" + taxonomy.name + \"checklist\", termListAddHandler(taxonomy.name));\n\n\t\t\tmetaboxTaxonomy.on(\"click\", \".wpseo-make-primary-term\", makePrimaryHandler(taxonomy.name));\n\t\t});\n\t};\n\n\t$(function () {\n\t\t// Initialize our templates\n\t\tprimaryTermUITemplate = wp.template(\"primary-term-ui\");\n\t\tprimaryTermScreenReaderTemplate = wp.template(\"primary-term-screen-reader\");\n\n\t\t$(_.values(taxonomies)).initYstSEOPrimaryCategory();\n\t});\n})(jQuery);\n\n/* Internal dependencies *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2432\n");

/***/ }),

/***/ 393:
/***/ (function(module, exports) {

eval("module.exports = window.yoast._wp.data;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid2luZG93LnlvYXN0Ll93cC5kYXRhXCI/MjNkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy55b2FzdC5fd3AuZGF0YTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcIndpbmRvdy55b2FzdC5fd3AuZGF0YVwiXG4vLyBtb2R1bGUgaWQgPSAzOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAyIDMgMTIiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///393\n");

/***/ }),

/***/ 51:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// The babel polyfill sets the _babelPolyfill to true. So only load it ourselves if the variable is undefined or false.\nif (typeof window._babelPolyfill === \"undefined\" || !window._babelPolyfill) {\n\t// eslint-disable-next-line global-require\n\t__webpack_require__(165);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvc3JjL2hlbHBlcnMvYmFiZWwtcG9seWZpbGwuanM/MTdiOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgYmFiZWwgcG9seWZpbGwgc2V0cyB0aGUgX2JhYmVsUG9seWZpbGwgdG8gdHJ1ZS4gU28gb25seSBsb2FkIGl0IG91cnNlbHZlcyBpZiB0aGUgdmFyaWFibGUgaXMgdW5kZWZpbmVkIG9yIGZhbHNlLlxuaWYgKCB0eXBlb2Ygd2luZG93Ll9iYWJlbFBvbHlmaWxsID09PSBcInVuZGVmaW5lZFwiIHx8ICEgd2luZG93Ll9iYWJlbFBvbHlmaWxsICkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcblx0cmVxdWlyZSggXCJiYWJlbC1wb2x5ZmlsbFwiICk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8ganMvc3JjL2hlbHBlcnMvYmFiZWwtcG9seWZpbGwuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///51\n");

/***/ })

},[2432]);